// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Expense {
  id          Int      @id @default(autoincrement())
  description String
  amount      Float
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expense")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("category")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Token              Token[]
  RefreshToken       RefreshToken[]
  PasswordResetToken PasswordResetToken[]
  Session            Session[]
  Expense            Expense[]

  @@map("user")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@map("token")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@map("refresh_token")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@map("password_reset_token")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification_request")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String
  accessToken  String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("session")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("account")
}
